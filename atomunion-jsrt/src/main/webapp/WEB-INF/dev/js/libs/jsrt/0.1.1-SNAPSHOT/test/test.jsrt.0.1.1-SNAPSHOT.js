var animalClass=Class.forName({name:"class js.model.Animal extends Object","@Getter @Setter private age":0,"private name":0,Animal:function(a){this.name=a},setName:function(a){this.name=a},getName:function(){return this.name},say:function(){return"i am a animal"}});$import("js.model.Animal");var dogClass=Class.forName({name:"class js.model.Dog extends js.model.Animal","@Getter @Setter private color":"black","@Getter @Setter private word":"",Dog:function(a,b){this.word=b},say:function(){return this.word}});$import("js.test.TestCase");$import("js.test.Assert");$import("js.model.Animal");$import("js.model.Dog");var dog=new js.model.Dog("dog","汪汪");Class.forName({name:"class test.lang.TestObject extends js.test.TestCase","@Test @Auto @Setter @Getter private obj":dog,testIsNull:function(){js.test.Assert.assertTrue("null",Object.isNull(null));js.test.Assert.assertTrue("undefined",Object.isNull(undefined));js.test.Assert.assertFalse("{}:",Object.isNull({}));js.test.Assert.assertFalse("[]:",Object.isNull([]));js.test.Assert.assertFalse("0",Object.isNull(0));js.test.Assert.assertFalse("0.0",Object.isNull(0));js.test.Assert.assertFalse('""',Object.isNull(""));js.test.Assert.assertFalse("-1",Object.isNull(-1));js.test.Assert.assertFalse("new Date()",Object.isNull(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isNull(dog));js.test.Assert.assertFalse("function(){}",Object.isNull(function(){}));js.test.Assert.assertFalse("true",Object.isNull(true));js.test.Assert.assertFalse("false",Object.isNull(false))},testIsEmpty:function(){js.test.Assert.assertTrue("null",Object.isEmpty(null));js.test.Assert.assertTrue("undefined",Object.isEmpty(undefined));js.test.Assert.assertFalse("{}",Object.isEmpty({}));js.test.Assert.assertTrue("[]",Object.isEmpty([]));js.test.Assert.assertFalse("0",Object.isEmpty(0));js.test.Assert.assertFalse("0.0",Object.isEmpty(0));js.test.Assert.assertTrue('""',Object.isEmpty(""));js.test.Assert.assertFalse("-1",Object.isEmpty(-1));js.test.Assert.assertFalse("new Date()",Object.isEmpty(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isEmpty(dog));js.test.Assert.assertFalse("function(){}",Object.isEmpty(function(){}));js.test.Assert.assertFalse("true",Object.isEmpty(true));js.test.Assert.assertFalse("false",Object.isEmpty(false))},testIsArray:function(){js.test.Assert.assertFalse("null",Object.isArray(null));js.test.Assert.assertFalse("undefined",Object.isArray(undefined));js.test.Assert.assertFalse("{}",Object.isArray({}));js.test.Assert.assertTrue("[]",Object.isArray([]));js.test.Assert.assertFalse("0",Object.isArray(0));js.test.Assert.assertFalse("0.0",Object.isArray(0));js.test.Assert.assertFalse('""',Object.isArray(""));js.test.Assert.assertFalse("-1",Object.isArray(-1));js.test.Assert.assertFalse("new Date()",Object.isArray(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isArray(dog));js.test.Assert.assertFalse("function(){}",Object.isArray(function(){}));js.test.Assert.assertFalse("true",Object.isArray(true));js.test.Assert.assertFalse("false",Object.isArray(false))},testIsDate:function(){js.test.Assert.assertFalse("null",Object.isDate(null));js.test.Assert.assertFalse("undefined",Object.isDate(undefined));js.test.Assert.assertFalse("{}",Object.isDate({}));js.test.Assert.assertFalse("[]",Object.isDate([]));js.test.Assert.assertFalse("0",Object.isDate(0));js.test.Assert.assertFalse("0.0",Object.isDate(0));js.test.Assert.assertFalse('""',Object.isDate(""));js.test.Assert.assertFalse("-1",Object.isDate(-1));js.test.Assert.assertTrue("new Date()",Object.isDate(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isDate(dog));js.test.Assert.assertFalse("function(){}",Object.isDate(function(){}));js.test.Assert.assertFalse("true",Object.isDate(true));js.test.Assert.assertFalse("false",Object.isDate(false))},testIsObject:function(){js.test.Assert.assertFalse("null",Object.isObject(null));js.test.Assert.assertFalse("undefined",Object.isObject(undefined));js.test.Assert.assertTrue("{}",Object.isObject({}));js.test.Assert.assertFalse("[]",Object.isObject([]));js.test.Assert.assertFalse("0",Object.isObject(0));js.test.Assert.assertFalse("0.0",Object.isObject(0));js.test.Assert.assertFalse('""',Object.isObject(""));js.test.Assert.assertFalse("-1",Object.isObject(-1));js.test.Assert.assertFalse("new Date()",Object.isObject(new Date()));js.test.Assert.assertTrue("new js.model.Dog()",Object.isObject(dog));js.test.Assert.assertFalse("function(){}",Object.isObject(function(){}));js.test.Assert.assertFalse("true:"+Object.isObject(true));js.test.Assert.assertFalse("false:"+Object.isObject(false))},testIsFunction:function(){js.test.Assert.assertFalse("null",Object.isFunction(null));js.test.Assert.assertFalse("undefined",Object.isFunction(undefined));js.test.Assert.assertFalse("{}",Object.isFunction({}));js.test.Assert.assertFalse("[]",Object.isFunction([]));js.test.Assert.assertFalse("0",Object.isFunction(0));js.test.Assert.assertFalse("0.0",Object.isFunction(0));js.test.Assert.assertFalse('""',Object.isFunction(""));js.test.Assert.assertFalse("-1",Object.isFunction(-1));js.test.Assert.assertFalse("new Date()",Object.isFunction(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isFunction(dog));js.test.Assert.assertTrue("function(){}",Object.isFunction(function(){}));js.test.Assert.assertFalse("true",Object.isFunction(true));js.test.Assert.assertFalse("false",Object.isFunction(false))},testIsNumber:function(){js.test.Assert.assertFalse("null",Object.isNumber(null));js.test.Assert.assertFalse("undefined",Object.isNumber(undefined));js.test.Assert.assertFalse("{}",Object.isNumber({}));js.test.Assert.assertFalse("[]",Object.isNumber([]));js.test.Assert.assertTrue("0",Object.isNumber(0));js.test.Assert.assertTrue("0.0",Object.isNumber(0));js.test.Assert.assertFalse('""',Object.isNumber(""));js.test.Assert.assertTrue("-1",Object.isNumber(-1));js.test.Assert.assertFalse("new Date()",Object.isNumber(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isNumber(dog));js.test.Assert.assertFalse("function(){}",Object.isNumber(function(){}));js.test.Assert.assertFalse("true",Object.isNumber(true));js.test.Assert.assertFalse("false",Object.isNumber(false))},testIsString:function(){js.test.Assert.assertFalse("null",Object.isString(null));js.test.Assert.assertFalse("undefined",Object.isString(undefined));js.test.Assert.assertFalse("{}",Object.isString({}));js.test.Assert.assertFalse("[]",Object.isString([]));js.test.Assert.assertFalse("0",Object.isString(0));js.test.Assert.assertFalse("0.0",Object.isString(0));js.test.Assert.assertTrue('""',Object.isString(""));js.test.Assert.assertFalse("-1",Object.isString(-1));js.test.Assert.assertFalse("new Date()",Object.isString(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isString(dog));js.test.Assert.assertFalse("function(){}",Object.isString(function(){}));js.test.Assert.assertFalse("true",Object.isString(true));js.test.Assert.assertFalse("false",Object.isString(false))},testIsBoolean:function(){js.test.Assert.assertFalse("null",Object.isBoolean(null));js.test.Assert.assertFalse("undefined",Object.isBoolean(undefined));js.test.Assert.assertFalse("{}",Object.isBoolean({}));js.test.Assert.assertFalse("[]",Object.isBoolean([]));js.test.Assert.assertFalse("0",Object.isBoolean(0));js.test.Assert.assertFalse("0.0",Object.isBoolean(0));js.test.Assert.assertFalse('""',Object.isBoolean(""));js.test.Assert.assertFalse("-1",Object.isBoolean(-1));js.test.Assert.assertFalse("new Date()",Object.isBoolean(new Date()));js.test.Assert.assertFalse("new js.model.Dog()",Object.isBoolean(dog));js.test.Assert.assertFalse("function(){}",Object.isBoolean(function(){}));js.test.Assert.assertTrue("true",Object.isBoolean(true));js.test.Assert.assertTrue("false",Object.isBoolean(false))},testIsDefined:function(){js.test.Assert.assertTrue("null",Object.isDefined(null));js.test.Assert.assertFalse("undefined",Object.isDefined(undefined));js.test.Assert.assertTrue("{}",Object.isDefined({}));js.test.Assert.assertTrue("[]",Object.isDefined([]));js.test.Assert.assertTrue("0",Object.isDefined(0));js.test.Assert.assertTrue("0.0",Object.isDefined(0));js.test.Assert.assertTrue('""',Object.isDefined(""));js.test.Assert.assertTrue("-1",Object.isDefined(-1));js.test.Assert.assertTrue("new Date()",Object.isDefined(new Date()));js.test.Assert.assertTrue("new js.model.Dog()",Object.isDefined(dog));js.test.Assert.assertTrue("function(){}",Object.isDefined(function(){}));js.test.Assert.assertTrue("true",Object.isDefined(true));js.test.Assert.assertTrue("false",Object.isDefined(false))},testClone:function(){js.lang.System.out.println("克隆前："+this.toString());var a=this.clone();js.lang.System.out.println("克隆后："+a.toString());js.test.Assert.assertNotSame("克隆前后  assertSame ",this,a)},testEach:function(){Object.each(this,function(c,d,b){js.lang.System.out.println(c+":"+d+"    this["+this+"]    被遍历的对象["+b.toString()+"]")},null)},testEnumerate:function(){var a=dog;js.lang.System.out.println("scope:"+a.toString());Object.enumerate(this,function(c,d,b){js.lang.System.out.println(c+":"+d+"    this["+this+"]    this==scope["+(this===a)+"]    被遍历的对象["+b.toString()+"]")},dog,true)},testToJson:function(){js.lang.System.out.println(this.toJson())},testToQueryString:function(){js.lang.System.out.println(this.toQueryString())},testGetClass:function(){js.lang.System.out.println(this.getClass());js.test.Assert.assertNotNull("this.getClass()",this.getClass())},testEquals:function(){js.test.Assert.assertTrue("this.equals(this)",this.equals(this));js.test.Assert.assertFalse("this.equals(null)",this.equals(null));js.test.Assert.assertFalse("this.equals(undefined)",this.equals(undefined))},testGetVersion:function(){js.test.Assert.assertNotNull("this.getVersion():",this.getVersion())},testHashCode:function(){js.test.Assert.assertNotNull("this.hashCode():",this.hashCode())},testToString:function(){js.test.Assert.assertNotNull("this.toString()",this.toString())}});new test.lang.TestObject();$import("js.model.Animal");$import("js.model.Dog");$import("js.test.TestCase");var testReflectObject=new js.model.Dog("dog","汪汪");Class.forName({name:"class test.lang.TestClass extends js.test.TestCase","@Test @Auto @Setter @Getter private dog":testReflectObject.getClass(),TestClass:function(){},testGetConstructor:function(){js.lang.System.out.println(this.getConstructor())},testGetInitial:function(){js.lang.System.out.println(this.getInitial())},testGetInit:function(){js.lang.System.out.println(this.getInit())},testGetName:function(){js.lang.System.out.println(this.getName())},testGetFullName:function(){js.lang.System.out.println(this.getFullName())},testGetInstance:function(){js.lang.System.out.println(this.getInstance())},testGetAnnotations:function(){js.lang.System.out.println(this.getAnnotations())},testGetPackage:function(){js.lang.System.out.println(this.getPackage())},testGetDeclaredField:function(){js.lang.System.out.println(this.getDeclaredField("color"))},testGetDeclaredFields:function(){js.lang.System.out.println(this.getDeclaredFields())},testGetField:function(){js.lang.System.out.println(this.getField("color"))},testGetFields:function(){js.lang.System.out.println(this.getFields())},testGetDeclaredMethod:function(){js.lang.System.out.println(this.getDeclaredMethod("say"))},testGetDeclaredMethods:function(){js.lang.System.out.println(this.getDeclaredMethods())},testGetMethod:function(){js.lang.System.out.println(this.getMethod("say"))},testGetMethods:function(){js.lang.System.out.println(this.getMethods())},testGetSuperClass:function(){js.lang.System.out.println(this.getSuperClass())},testGetModifiers:function(){js.lang.System.out.println(this.getModifiers())},testAddMethod:function(){this.addMethod(new js.lang.reflect.Method("testAddMethod",function(){return"我是动态新增的方法"},this,1,[]));js.lang.System.out.println(testReflectObject.testAddMethod())},testAddField:function(){js.lang.System.out.println(this.addField(new js.lang.reflect.Field("testAddField","我是动态新增的属性",this,1,["@Getter","@Setter"])));js.lang.System.out.println(testReflectObject.getTestAddField())},testNewInstance:function(){var a=this.newInstance();js.lang.System.out.println(a.getColor())}});new test.lang.TestClass();$import("js.model.Animal");$import("js.model.Dog");$import("js.test.TestCase");var testReflectObject=new js.model.Dog("dog","汪汪");Class.forName({name:"class test.lang.reflect.TestField extends js.test.TestCase","@Test @Auto @Setter @Getter private fields":testReflectObject.getClass().getFields()["color"],TestField:function(){},testGetDeclaringClass:function(){js.lang.System.out.println(this.getDeclaringClass())},testGetName:function(){js.lang.System.out.println(this.getName())},testGetModifiers:function(){js.lang.System.out.println(this.getModifiers())},testGetAnnotations:function(){js.lang.System.out.println(this.getAnnotations())},testGetValue:function(){js.lang.System.out.println(this.getValue())},testGet:function(){js.lang.System.out.println(this.get(testReflectObject))},testSet:function(){js.lang.System.out.println('set("red")');this.set(testReflectObject,"red");js.lang.System.out.println(this.get(testReflectObject))}});new test.lang.reflect.TestField();$import("js.model.Animal");$import("js.model.Dog");$import("js.test.TestCase");var testReflectObject=new js.model.Dog("dog","汪汪");Class.forName({name:"class test.lang.reflect.TestMethod extends js.test.TestCase","@Test @Auto @Setter @Getter private methods":testReflectObject.getClass().getMethods()["say"],TestMethod:function(){},testInvoke:function(){js.lang.System.out.println('invoke say(), The desired operation is to print "汪汪"');js.lang.System.out.println(this.invoke(testReflectObject))},testGetDeclaringClass:function(){js.lang.System.out.println(this.getDeclaringClass())},testGetName:function(){js.lang.System.out.println(this.getName())},testGetModifiers:function(){js.lang.System.out.println(this.getModifiers())},testGetAnnotations:function(){js.lang.System.out.println(this.getAnnotations())},testGetValue:function(){js.lang.System.out.println(this.getValue())}});new test.lang.reflect.TestMethod();$import("js.test.TestCase");$import("js.util.ArrayList");Class.forName({name:"class test.util.TestList extends js.test.TestCase","@Test @Auto @Setter @Getter private list":new js.util.ArrayList(),TestList:function(){for(var a=0;a<3;a++){this.getList().add("测试List接口"+a)}},testListIterator:function(){var a=this.listIterator();while(a.hasNext()){js.lang.System.out.println(a.next())}while(a.hasPrevious()){js.lang.System.out.println(a.previous())}},testIterator:function(){var a=this.iterator();while(a.hasNext()){js.lang.System.out.println(a.next())}},testIndexOf:function(){for(var a=0;a<3;a++){js.lang.System.out.println("********indexOf:"+a+"   value:"+this.indexOf("测试"+a))}},testLastIndexOf:function(){for(var a=0;a<3;a++){js.lang.System.out.println("********lastIndexOf:"+a+"   value:"+this.lastIndexOf("测试"+a))}},testSubList:function(){js.lang.System.out.println("********subList(1,2)->   value:"+this.subList(1,2))},testClear:function(){js.lang.System.out.println("clear前："+this.size());this.clear();js.lang.System.out.println("clear后："+this.size())}});new test.util.TestList();$import("js.test.TestCase");$import("js.util.ArrayList");Class.forName({name:"class test.util.TestArrayList extends js.test.TestCase","@Test @Auto @Setter @Getter private list":new js.util.ArrayList(),TestArrayList:function(){for(var a=0;a<3;a++){this.getList().add("测试ArrayList"+a)}},testAdd:function(){for(var a=4;a<7;a++){this.add("测试ArrayList"+a);js.lang.System.out.println("添加->测试ArrayList"+a)}},testGet:function(){for(var a=0;a<3;a++){js.lang.System.out.println("********index:"+a+"   value:"+this.get(a))}},testSet:function(){var b=2,a="新添加的3";js.lang.System.out.println("set-> index:"+b+",value:"+a+"  ,旧值："+this.set(b,a)+"新值:"+this.get(b))},testRemove:function(){var a=2;js.lang.System.out.println("remove-> index:"+a+",旧值："+this.remove(a)+"size:"+this.size())},testSize:function(){js.lang.System.out.println("size:"+this.size())},testClone:function(){var d=this.clone();js.lang.System.out.println("克隆前："+this.size());js.lang.System.out.println("克隆后："+d.size());var b=d.iterator();var a=0;while(b.hasNext()){js.lang.System.out.println("克隆前："+this.get(a++)+"       克隆后："+b.next())}}});new test.util.TestList();new test.util.TestArrayList();$import("js.test.TestCase");$import("js.util.HashSet");Class.forName({name:"class test.util.TestHashSet extends js.test.TestCase","@Test @Auto @Setter @Getter private set":new js.util.HashSet(),TestHashSet:function(){for(var a=0;a<3;a++){this.getSet().add("测试set"+a)}},testSize:function(){js.lang.System.out.println("size:"+this.size())},testClear:function(){js.lang.System.out.println("clear:");this.clear();js.lang.System.out.println("size:"+this.size())},testAdd:function(){for(var a=0;a<3;a++){js.lang.System.out.println("测试set"+a);this.add("测试set"+a)}for(var a=0;a<3;a++){js.lang.System.out.println("测试set"+a);this.add("测试set"+a)}js.lang.System.out.println("size:"+this.size())},testIterator:function(){var a=this.iterator();while(a.hasNext()){js.lang.System.out.println(a.next())}},testContains:function(){var a="测试set"+3;js.lang.System.out.println("value:"+a+",contains:"+this.contains(a))},testIsEmpty:function(){js.lang.System.out.println("isEmpty:"+this.isEmpty())},testRemove:function(){var a="测试set"+2;js.lang.System.out.println("remove-> key:"+a+",旧值："+this.remove(a)+" ,size:"+this.size())},testClone:function(){var f=this.clone();js.lang.System.out.println("克隆前："+this.size());js.lang.System.out.println("克隆后："+f.size());var b=this.iterator();var a=f.iterator();while(b.hasNext()){var e=b.next();var d=a.next();js.lang.System.out.println("克隆前：value:"+e+"       克隆后：value:"+d)}}});new test.util.TestHashSet();$import("js.test.TestCase");$import("js.util.HashMap");Class.forName({name:"class test.util.TestMap extends js.test.TestCase","@Test @Auto @Setter @Getter private map":new js.util.HashMap(),TestMap:function(){for(var a=0;a<6;a++){this.getMap().put(a,"测试Map"+a)}},testContainsKey:function(){for(var a=2;a<4;a++){js.lang.System.out.println("containsKey->  index:"+a+",containsKey:"+this.containsKey(a))}},testContainsValue:function(){for(var a=2;a<4;a++){js.lang.System.out.println("containsValue->  value:测试Map"+a+",containsValue:"+this.containsValue("测试Map"+a))}},testGet:function(){for(var a=4;a<6;a++){js.lang.System.out.println("get-> index:"+a+",value:"+this.get(a))}},testIsEmpty:function(){js.lang.System.out.println("isEmpty->"+this.isEmpty())},testPut:function(){for(var a=3;a<6;a++){this.put(a,"新put"+a);js.lang.System.out.println("put->key:"+a+",value:"+this.get(a))}},testSize:function(){js.lang.System.out.println("size:"+this.size())},testRemove:function(){var a=5;js.lang.System.out.println("remove-> key:"+a+",旧值："+this.remove(a)+" ,size:"+this.size())},testClone:function(){var f=this.clone();js.lang.System.out.println("克隆前："+this.size());js.lang.System.out.println("克隆后："+f.size());var e=this.entrySet().iterator();var b=f.entrySet().iterator();while(e.hasNext()){var d=e.next();var a=b.next();js.lang.System.out.println("克隆前：key:"+d.getKey()+",value:"+d.getValue()+"       克隆后：key:"+a.getKey()+",value:"+a.getValue())}}});new test.util.TestMap();$import("js.test.TestCase");$import("js.util.HashMap");Class.forName({name:"class test.util.TestHashMap extends js.test.TestCase","@Test @Auto @Setter @Getter private map":new js.util.HashMap(),TestHashMap:function(){for(var a=0;a<6;a++){this.getMap().put(a,"测试Map"+a)}},testEntrySet:function(){var a=this.entrySet().iterator();while(a.hasNext()){var b=a.next();js.lang.System.out.println("key:"+b.getKey()+",value:"+b.getValue())}},testKeySet:function(){var b=this.keySet().iterator();while(b.hasNext()){var a=b.next();js.lang.System.out.println("key:"+a+",value:"+this.get(a))}},testValues:function(){var a=this.values().iterator();while(a.hasNext()){var b=a.next();js.lang.System.out.println("value:"+b)}}});new test.util.TestHashMap();